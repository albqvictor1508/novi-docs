{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import {\r\n\tdefineDocumentType,\r\n\tdefineNestedType,\r\n\tmakeSource,\r\n} from 'contentlayer/source-files';\r\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings';\r\nimport rehypePrettyCode from 'rehype-pretty-code';\r\nimport rehypeSlug from 'rehype-slug';\r\nimport { visit } from 'unist-util-visit';\r\n\r\nconst Buttons = defineNestedType(() => ({\r\n\tname: 'Buttons',\r\n\tfields: {\r\n\t\tlabel: { type: 'string', required: true },\r\n\t\thref: { type: 'string', required: true },\r\n\t},\r\n}));\r\n\r\nexport const Content = defineDocumentType(() => ({\r\n\tname: 'Content',\r\n\tfilePathPattern: 'docs/**/*.mdx',\r\n\tcontentType: 'mdx',\r\n\tfields: {\r\n\t\ttitle: { type: 'string', required: true },\r\n\t\tdescription: { type: 'string', required: true },\r\n\t\tbuttons: {\r\n\t\t\ttype: 'list',\r\n\t\t\tof: Buttons,\r\n\t\t},\r\n\t\tbadge: { type: 'string' },\r\n\t},\r\n\tcomputedFields: {\r\n\t\tcategory: {\r\n\t\t\ttype: 'string',\r\n\t\t\tresolve: ({ _raw }) => _raw.flattenedPath.split('/')[1],\r\n\t\t},\r\n\t\tslug: {\r\n\t\t\ttype: 'string',\r\n\t\t\tresolve: ({ _raw }) => _raw.sourceFileName.replace(/\\.mdx$/, ''),\r\n\t\t},\r\n\t\turl: {\r\n\t\t\ttype: 'string',\r\n\t\t\tresolve: ({ _raw }) => _raw.flattenedPath.replace(/\\.mdx$/, ''),\r\n\t\t},\r\n\t},\r\n}));\r\n\r\nexport default makeSource({\r\n\tcontentDirPath: 'content',\r\n\tdocumentTypes: [Content],\r\n\tmdx: {\r\n\t\trehypePlugins: [\r\n\t\t\t() => tree => {\r\n\t\t\t\tvisit(tree, node => {\r\n\t\t\t\t\tif (node?.type === 'element' && node?.tagName === 'pre') {\r\n\t\t\t\t\t\tconst [codeEl] = node.children;\r\n\r\n\t\t\t\t\t\tif (codeEl.tagName !== 'code') return;\r\n\t\t\t\t\t\tlet raw = codeEl.children?.[0].value;\r\n\r\n\t\t\t\t\t\tnode.raw = raw;\r\n\t\t\t\t\t\tconst meta = codeEl?.data?.meta;\r\n\r\n\t\t\t\t\t\tif (meta) {\r\n\t\t\t\t\t\t\tconst metaValues = meta.split(/\\s+/);\r\n\t\t\t\t\t\t\tconst equalSignedMetaValues = metaValues.reduce(\r\n\t\t\t\t\t\t\t\t(acc: any, metaValue: any) => {\r\n\t\t\t\t\t\t\t\t\tconst [key, value] = metaValue.split('=');\r\n\t\t\t\t\t\t\t\t\tif (key && value) acc[key] = value;\r\n\t\t\t\t\t\t\t\t\treturn acc;\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t{}\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\tnode.props = equalSignedMetaValues;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\trehypeSlug,\r\n\t\t\t[\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\trehypePrettyCode,\r\n\t\t\t\t{\r\n\t\t\t\t\ttheme: 'one-dark-pro',\r\n\t\t\t\t\tkeepBackground: false,\r\n\t\t\t\t\twrapLines: true,\r\n\t\t\t\t\twrapLongLines: true,\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t\t() => tree => {\r\n\t\t\t\tvisit(tree, node => {\r\n\t\t\t\t\tif (node?.raw) {\r\n\t\t\t\t\t\tfor (const child of node.children) {\r\n\t\t\t\t\t\t\tif (child.tagName === 'pre') {\r\n\t\t\t\t\t\t\t\tchild.properties['raw'] = node.raw;\r\n\t\t\t\t\t\t\t\tfor (const key in node.props) {\r\n\t\t\t\t\t\t\t\t\tchild.properties[key] = node.props[key];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\t[\r\n\t\t\t\trehypeAutolinkHeadings,\r\n\t\t\t\t{\r\n\t\t\t\t\tproperties: {\r\n\t\t\t\t\t\tclassName: ['subheading-anchor'],\r\n\t\t\t\t\t\tariaLabel: 'Link to section',\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t],\r\n\t},\r\n});"],
  "mappings": "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",
  "names": []
}
